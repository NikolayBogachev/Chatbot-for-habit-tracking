from datetime import date

from aiogram import F, Router

from aiogram.filters import CommandStart, StateFilter

from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, ForceReply

from loguru import logger


from TG.StatesGroup import HabitStates, switch_keyboard
from TG.bot import bot
from TG.funcs_tg import User
from TG.keyboards.InlineKeyboard import (get_habit_choice_keyboard, useful_habit_choice_keyboard,
                                         harmful_habit_choice_keyboard, health_habit_keyboard, sport_habit_keyboard,
                                         nutrition_habit_keyboard, update_habits_keyboard,
                                         create_habits_inline_keyboard, create_change_fields_keyboard,
                                         track_habit_keyboard, create_track_habits_inline_keyboard,
                                         completion_marks_keyboard)
from TG.keyboards.ReplyKeyboard import get_main_menu_keyboard

router = Router()

user_messages = {}
"""
–ë–ª–æ–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.
"""


@router.message(CommandStart())
async def command_start_handler(message: Message):
    user = message.from_user
    user_id = user.id
    username = user.username
    chat_id = message.chat.id
    is_premium = user.is_premium
    language = user.language_code
    args = message.text.split()[1] if len(message.text.split()) > 1 else None
    deep_linking = args if args else "unknown"  # –ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º "unknown"

    auth_response = await User.authenticate_user(username, chat_id)
    logger.debug(f"Auth response: {auth_response}")

    if auth_response:
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
        User.access_token = auth_response.get("access_token")
        User.refresh_token = auth_response.get("refresh_token")
        User.token_type = auth_response.get("token_type")

        await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, {user.full_name}!",
                             reply_markup=get_main_menu_keyboard())
        logger.info(f"User {user.full_name} successfully authenticated.")
    else:
        # –ï—Å–ª–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        reg_response = await User.register_user(username, chat_id)
        logger.debug(f"Registration response: {reg_response}")

        if reg_response:
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            User.access_token = reg_response
            User.refresh_token = None
            User.token_type = "Bearer"
            await message.answer(f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!",
                                 reply_markup=get_main_menu_keyboard())
            logger.info(f"User {user.full_name} registered with token.")
        else:
            await message.answer("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.")
            logger.error(f"User {user.full_name} registration failed.")


@router.message(lambda message: message.text == "üìù –í—ã–±–æ—Ä –ø—Ä–∏–≤—ã—á–µ–∫")
async def handle_habit_choice(message: Message, state: FSMContext):

    await message.delete()
    await state.set_state(HabitStates.main_menu)

    await bot.send_message(
        chat_id=message.chat.id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_habit_choice_keyboard()
    )


@router.callback_query(F.data == "cancel", StateFilter(HabitStates.main_menu, HabitStates.execution))
async def handle_cancel(callback: CallbackQuery, state: FSMContext):

    await callback.message.delete()

    await state.clear()

"""
–ë–ª–æ–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—Å—Ç–∏–∫–∏.
"""


@router.message(lambda message: message.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def handle_habit_choice(message: Message, state: FSMContext):
    await message.delete()
    await state.set_state(HabitStates.statistics)

    if not (habits := await User.get_habits()):
        await User.authenticate_user(message.from_user.username, message.chat.id)
        habits = await User.get_habits()

    if habits:
        tracked_habits = [habit for habit in habits if habit.is_tracked == True]

        if not tracked_habits:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫.")
            return

        stats_message = "üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø—Ä–∏–≤—ã—á–∫–∞–º:\n\n"

        for habit in tracked_habits:
            stats_message += (
                f"üìù –ü—Ä–∏–≤—ã—á–∫–∞: {habit.name}\n"
                f"üîÅ –°—Ç—Ä–∏–∫ –¥–Ω–µ–π: {habit.current_streak}\n"
                f"üìÖ –í—Å–µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {habit.total_completed} –¥–Ω–µ–π\n\n"
            )

        await message.answer(stats_message)



"""
–ë–ª–æ–∫ –æ—Ç–º–µ—Ç–æ–∫ –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏.
"""


@router.message(lambda message: message.text == "üìÖ –¢—Ä–µ–∫–∏–Ω–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")
async def handle_habit_choice(message: Message, state: FSMContext):

    await message.delete()
    await state.set_state(HabitStates.execution)

    await bot.send_message(
        chat_id=message.chat.id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=completion_marks_keyboard()
    )


@router.callback_query(F.data == "completed", StateFilter(HabitStates.execution))
async def handle_completed_habit(callback: CallbackQuery, state: FSMContext):
    habits = await User.get_unlogged_habits()
    await state.set_state(HabitStates.execution_habit)
    if habits:
        keyb = create_habits_inline_keyboard(habits)
        await bot.send_message(
            chat_id=callback.message.chat.id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –ø—Ä–∏–≤—ã—á–∫—É:",
            reply_markup=keyb
        )
    else:

        await User.authenticate_user(callback.from_user.username, callback.message.chat.id)
        habits = await User.get_unlogged_habits()
        keyb = create_habits_inline_keyboard(habits)
        await bot.send_message(
            chat_id=callback.message.chat.id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –ø—Ä–∏–≤—ã—á–∫—É:",
            reply_markup=keyb
        )


@router.callback_query(F.data == "not_fulfill", StateFilter(HabitStates.execution))
async def handle_completed_habit(callback: CallbackQuery, state: FSMContext):
    habits = await User.get_unlogged_habits()
    await state.set_state(HabitStates.not_completed)
    if habits:
        keyb = create_habits_inline_keyboard(habits)
        await bot.send_message(
            chat_id=callback.message.chat.id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –ø—Ä–∏–≤—ã—á–∫—É:",
            reply_markup=keyb
        )
    else:

        await User.authenticate_user(callback.from_user.username, callback.message.chat.id)
        habits = await User.get_unlogged_habits()
        keyb = create_habits_inline_keyboard(habits)
        await bot.send_message(
            chat_id=callback.message.chat.id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é –ø—Ä–∏–≤—ã—á–∫—É:",
            reply_markup=keyb
        )


@router.callback_query(F.data.startswith("habit_"), StateFilter(HabitStates.execution_habit, HabitStates.not_completed))
async def handle_delete_habit(callback: CallbackQuery, state: FSMContext):

    habit_id = int(callback.data.split("_")[-1])

    if state == HabitStates.execution_habit:
        log_data = {'completed': True}
    elif state == HabitStates.not_completed:
        log_data = {'completed': False}
    else:
        await callback.message.answer(
            "‚ùå –û—à–∏–±–∫–∞: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=None
        )
        return

    result = await User.create_habit_log(habit_id, log_data)

    if result:

        await callback.message.answer(
            "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ—Ç–∏–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏!",
            reply_markup=None
        )

        await callback.message.delete()

        await state.clear()
    else:

        await User.authenticate_user(callback.from_user.username, callback.message.chat.id)
        result = await User.create_habit_log(habit_id, log_data)

        if result:

            await callback.message.answer(
                "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ—Ç–∏–ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏!",
                reply_markup=None
            )

            await callback.message.delete()

            await state.clear()
        else:

            await callback.message.answer(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.",
                reply_markup=None
            )


@router.callback_query(F.data == "back",
                       StateFilter(HabitStates.execution_habit, HabitStates.not_completed
                                   )
                       )
async def handle_back(callback: CallbackQuery, state: FSMContext):
    await state.set_state(HabitStates.execution)
    await bot.send_message(
        chat_id=callback.message.chat.id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=completion_marks_keyboard()
    )

"""
–ë–ª–æ–∫ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏.
"""


@router.callback_query(F.data == "option", StateFilter(HabitStates.health_menu, HabitStates.useful_habit_menu,
                       HabitStates.sport_menu, HabitStates.nutrition_menu, HabitStates.harmful_habit_menu))
async def handle_useful_habit(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id

    success_msg = await bot.send_message(
        chat_id=callback.message.chat.id,
        text="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏: –ù–∞–ø—Ä–∏–º–µ—Ä '–ë–µ–≥'",
        reply_markup=ForceReply()
    )
    if user_id in user_messages:
        user_messages[user_id].append(success_msg.message_id)

    else:
        user_messages[user_id] = [success_msg.message_id]

    await state.set_state(HabitStates.waiting_for_habit_name)


@router.message(StateFilter(HabitStates.waiting_for_habit_name))
async def process_description(message: Message, state: FSMContext):
    await state.update_data(habit_name=message.text)
    user_id = message.from_user.id

    success_msg = await bot.send_message(
        chat_id=message.chat.id,
        text="–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏: –ù–∞–ø—Ä–∏–º–µ—Ä '–ë–µ–≥–∞—Ç—å –ø–æ —É—Ç—Ä–∞–º'",
        reply_markup=ForceReply()
    )
    if user_id in user_messages:
        user_messages[user_id].append(success_msg.message_id)
        user_messages[user_id].append(message.message_id)
    else:
        user_messages[user_id] = [success_msg.message_id]

    await state.set_state(HabitStates.waiting_for_description)


@router.message(StateFilter(HabitStates.waiting_for_description))
async def process_habit_name(message: Message, state: FSMContext):

    await state.update_data(description=message.text)
    user_id = message.from_user.id

    success_msg = await bot.send_message(
        chat_id=message.chat.id,
        text="–°–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –ø—Ä–∏–≤—ã—á–∫—É? (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 21 –¥–µ–Ω—å)",

    )
    if user_id in user_messages:
        user_messages[user_id].append(success_msg.message_id)
        user_messages[user_id].append(message.message_id)
    else:
        user_messages[user_id] = [success_msg.message_id]

    await state.set_state(HabitStates.waiting_for_days)


@router.message(StateFilter(HabitStates.waiting_for_days))
async def process_habit_days(message: Message, state: FSMContext):
    try:

        days = int(message.text)
    except ValueError:
        days = 21

    user_data = await state.get_data()
    habit_name = user_data.get('habit_name')
    description = user_data.get('description', "")

    habit_data = {
        "name": habit_name,
        "description": description,
        "target_days": days,
        "streak_days": 0,
        "start_date": date.today().isoformat(),  # –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞
        "last_streak_start": date.today().isoformat(),
        "current_streak": 0,
        "total_completed": 0
    }

    user_id = message.from_user.id
    # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∏–≤—ã—á–∫—É —á–µ—Ä–µ–∑ API
    result = await User.create_habit(habit_data)
    if result:

        if user_id in user_messages:
            for msg_id in user_messages[user_id]:
                await bot.delete_message(chat_id=message.chat.id, message_id=msg_id)

            # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            del user_messages[user_id]

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–≤—ã—á–∫–∏
        success_msg = await bot.send_message(
            chat_id=message.chat.id,
            text=f"–ü—Ä–∏–≤—ã—á–∫–∞ '{habit_name}' –±—É–¥–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å—Å—è {days} –¥–Ω–µ–π.",
            reply_markup=get_main_menu_keyboard()
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫
        if user_id in user_messages:
            user_messages[user_id].append(success_msg.message_id)
            user_messages[user_id].append(message.message_id)
        else:
            user_messages[user_id] = [success_msg.message_id]
    else:

        await User.authenticate_user(message.from_user.username, message.chat.id)
        result = await User.create_habit(habit_data)
        if result:

            if user_id in user_messages:
                for msg_id in user_messages[user_id]:
                    await bot.delete_message(chat_id=message.chat.id, message_id=msg_id)

                del user_messages[user_id]

            success_msg = await bot.send_message(
                chat_id=message.chat.id,
                text=f"–ü—Ä–∏–≤—ã—á–∫–∞ '{habit_name}' –±—É–¥–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å—Å—è {days} –¥–Ω–µ–π.",
                reply_markup=get_main_menu_keyboard()
            )

            if user_id in user_messages:
                user_messages[user_id].append(success_msg.message_id)
                user_messages[user_id].append(message.message_id)
            else:
                user_messages[user_id] = [success_msg.message_id]
        else:
            await bot.send_message(message.chat.id, f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")

    await state.set_state(HabitStates.main_menu)

"""
–ë–ª–æ–∫  –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–µ–∫.
"""


@router.callback_query(F.data == "delete", StateFilter(HabitStates.update_habits_menu))
async def handle_update_habits(callback: CallbackQuery, state: FSMContext):
    habits = await User.get_habits()
    if habits:

        await switch_keyboard(callback, state, HabitStates.habits_menu, lambda: create_habits_inline_keyboard(habits))
    else:

        await User.authenticate_user(callback.from_user.username, callback.message.chat.id)
        habits = await User.get_habits()

        await switch_keyboard(callback, state, HabitStates.habits_menu, lambda: create_habits_inline_keyboard(habits))


@router.callback_query(F.data == "change", StateFilter(HabitStates.update_habits_menu))
async def handle_update_habits(callback: CallbackQuery, state: FSMContext):
    habits = await User.get_habits()
    if habits:

        await switch_keyboard(callback, state, HabitStates.habits_change_menu, lambda: create_habits_inline_keyboard(habits))
    else:

        await User.authenticate_user(callback.from_user.username, callback.message.chat.id)
        habits = await User.get_habits()

        await switch_keyboard(callback, state, HabitStates.habits_change_menu, lambda: create_habits_inline_keyboard(habits))


@router.callback_query(F.data.startswith("habit_"), StateFilter(HabitStates.habits_menu))
async def handle_delete_habit(callback: CallbackQuery, state: FSMContext):
    habit_id = int(callback.data.split("_")[-1])

    result = await User.delete_habit(habit_id)

    if result:

        habits = await User.get_habits()
        await switch_keyboard(callback, state, HabitStates.habits_menu, lambda: create_habits_inline_keyboard(habits))
    else:

        await User.authenticate_user(callback.from_user.username, callback.message.chat.id)
        habits = await User.get_habits()
        await switch_keyboard(callback, state, HabitStates.habits_menu, lambda: create_habits_inline_keyboard(habits))


@router.callback_query(F.data.startswith("habit_"), StateFilter(HabitStates.habits_change_menu))
async def handle_change_habit(callback: CallbackQuery, state: FSMContext):
    habit_id = int(callback.data.split("_")[-1])  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø—Ä–∏–≤—ã—á–∫–∏ –∏–∑ callback_data
    await switch_keyboard(callback, state, HabitStates.habits_change,
                          lambda: create_change_fields_keyboard(habit_id))


@router.callback_query(F.data.startswith("change_"), StateFilter(HabitStates.habits_change))
async def handle_change_field(callback: CallbackQuery, state: FSMContext):
    action, habit_id = callback.data.split("_")[1:3]
    habit_id = int(habit_id)

    if action == "name":
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏:")
        await state.update_data(habit_id=habit_id, change_field="name")
        await state.set_state(HabitStates.change_field)
    elif action == "description":
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏:")
        await state.update_data(habit_id=habit_id, change_field="description")
        await state.set_state(HabitStates.change_field)
    elif action == "target_days":
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ —Ü–µ–ª–µ–≤—ã–µ –¥–Ω–∏:")
        await state.update_data(habit_id=habit_id, change_field="target_days")
        await state.set_state(HabitStates.change_field)
    elif action == "start_date":
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:")
        await state.update_data(habit_id=habit_id, change_field="start_date")
        await state.set_state(HabitStates.change_field)


@router.message(StateFilter(HabitStates.change_field))
async def handle_new_value(message: Message, state: FSMContext):
    user_data = await state.get_data()
    habit_id = user_data["habit_id"]
    field_to_change = user_data["change_field"]
    new_value = message.text

    update_data = {field_to_change: new_value}

    response = await User.update_habit(habit_id, update_data)

    if response:
        await message.answer(f"–ü–æ–ª–µ {field_to_change} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
    else:
        await User.authenticate_user(message.from_user.username, message.chat.id)
        response = await User.update_habit(habit_id, update_data)
        if response:
            await message.answer(f"–ü–æ–ª–µ {field_to_change} —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")


"""
–ë–ª–æ–∫ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–µ–Ω—é –∏ –≤–æ–∑–≤—Ä–∞—Ç –∏–∑ –Ω–∏—Ö.
"""


@router.callback_query(F.data == "track", StateFilter(HabitStates.main_menu))
async def handle_track_habits(callback: CallbackQuery, state: FSMContext):
    await switch_keyboard(callback, state, HabitStates.track_habit_menu, track_habit_keyboard)


@router.callback_query(F.data == "begin", StateFilter(HabitStates.track_habit_menu))
async def handle_begin_track_habits(callback: CallbackQuery, state: FSMContext):
    habits = await User.get_habits()
    if habits:
        await switch_keyboard(callback, state, HabitStates.begin_track_habit,
                              lambda: create_track_habits_inline_keyboard(habits, False))
    else:
        await User.authenticate_user(callback.from_user.username, callback.message.chat.id)
        habits = await User.get_habits()
        await switch_keyboard(callback, state, HabitStates.begin_track_habit,
                              lambda: create_track_habits_inline_keyboard(habits, False))


@router.callback_query(F.data == "cease", StateFilter(HabitStates.track_habit_menu))
async def handle_cease_track_habits(callback: CallbackQuery, state: FSMContext):
    habits = await User.get_habits()
    if habits:
        await switch_keyboard(callback, state, HabitStates.cease_track_habit,
                              lambda: create_track_habits_inline_keyboard(habits, True))
    else:
        await User.authenticate_user(callback.from_user.username, callback.message.chat.id)
        habits = await User.get_habits()
        await switch_keyboard(callback, state, HabitStates.cease_track_habit,
                              lambda: create_track_habits_inline_keyboard(habits, True))


@router.callback_query(F.data.startswith("habit_"), StateFilter(HabitStates.begin_track_habit,
                                                                HabitStates.cease_track_habit))
async def handle_back(callback: CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    current_state = await state.get_state()
    match  current_state:
        case HabitStates.begin_track_habit.state:
            habit_id = int(callback.data.split("_")[-1])  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø—Ä–∏–≤—ã—á–∫–∏ –∏–∑ callback_data
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏
            update_data = {"is_tracked": True}
            # –õ–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            response = await User.update_habit(habit_id, update_data)
            if response:
                await switch_keyboard(callback, state, HabitStates.main_menu, get_habit_choice_keyboard)
            else:
                await User.authenticate_user(callback.from_user.username, callback.message.chat.id)
                response = await User.update_habit(habit_id, update_data)
                await switch_keyboard(callback, state, HabitStates.main_menu, get_habit_choice_keyboard)

        case HabitStates.cease_track_habit.state:
            habit_id = int(callback.data.split("_")[-1])  # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø—Ä–∏–≤—ã—á–∫–∏ –∏–∑ callback_data
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏
            update_data = {"is_tracked": False}
            # –õ–æ–≥–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            response = await User.update_habit(habit_id, update_data)
            if response:
                await switch_keyboard(callback, state, HabitStates.main_menu, get_habit_choice_keyboard)
            else:
                await User.authenticate_user(callback.from_user.username, callback.message.chat.id)
                response = await User.update_habit(habit_id, update_data)
                await switch_keyboard(callback, state, HabitStates.main_menu, get_habit_choice_keyboard)


@router.callback_query(F.data == "update_habits", StateFilter(HabitStates.main_menu))
async def handle_update_habits(callback: CallbackQuery, state: FSMContext):
    await switch_keyboard(callback, state, HabitStates.update_habits_menu, update_habits_keyboard)


@router.callback_query(F.data == "harmful", StateFilter(HabitStates.main_menu))
async def handle_harmful_habit(callback: CallbackQuery, state: FSMContext):
    await switch_keyboard(callback, state, HabitStates.harmful_habit_menu, harmful_habit_choice_keyboard)


@router.callback_query(F.data == "useful", StateFilter(HabitStates.main_menu))
async def handle_useful_habit(callback: CallbackQuery, state: FSMContext):
    await switch_keyboard(callback, state, HabitStates.useful_habit_menu, useful_habit_choice_keyboard)


@router.callback_query(F.data == "health", StateFilter(HabitStates.useful_habit_menu))
async def handle_health(callback: CallbackQuery, state: FSMContext):
    await switch_keyboard(callback, state, HabitStates.health_menu, health_habit_keyboard)


@router.callback_query(F.data == "sport", StateFilter(HabitStates.useful_habit_menu))
async def handle_health(callback: CallbackQuery, state: FSMContext):
    await switch_keyboard(callback, state, HabitStates.sport_menu, sport_habit_keyboard)


@router.callback_query(F.data == "nutrition", StateFilter(HabitStates.useful_habit_menu))
async def handle_health(callback: CallbackQuery, state: FSMContext):
    await switch_keyboard(callback, state, HabitStates.nutrition_menu, nutrition_habit_keyboard)


@router.callback_query(F.data == "back",
                       StateFilter(HabitStates.health_menu, HabitStates.useful_habit_menu, HabitStates.sport_menu,
                                   HabitStates.nutrition_menu, HabitStates.harmful_habit_menu,
                                   HabitStates.update_habits_menu, HabitStates.habits_menu, HabitStates.habits_change,
                                   HabitStates.habits_change_menu, HabitStates.track_habit_menu,
                                   HabitStates.begin_track_habit, HabitStates.cease_track_habit,
                                   )
                       )
async def handle_back(callback: CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    current_state = await state.get_state()
    match  current_state:
        case HabitStates.health_menu.state:
            #–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –ø–æ–ª–µ–∑–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫
            await switch_keyboard(callback, state, HabitStates.useful_habit_menu, useful_habit_choice_keyboard)
        case HabitStates.sport_menu.state:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –ø–æ–ª–µ–∑–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫
            await switch_keyboard(callback, state, HabitStates.useful_habit_menu, useful_habit_choice_keyboard)
        case HabitStates.nutrition_menu.state:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –ø–æ–ª–µ–∑–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫
            await switch_keyboard(callback, state, HabitStates.useful_habit_menu, useful_habit_choice_keyboard)
        case HabitStates.useful_habit_menu.state:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await switch_keyboard(callback, state, HabitStates.main_menu, get_habit_choice_keyboard)
        case HabitStates.harmful_habit_menu.state:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await switch_keyboard(callback, state, HabitStates.main_menu, get_habit_choice_keyboard)
        case HabitStates.update_habits_menu.state:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await switch_keyboard(callback, state, HabitStates.main_menu, get_habit_choice_keyboard)
        case HabitStates.habits_menu.state:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await switch_keyboard(callback, state, HabitStates.main_menu, get_habit_choice_keyboard)
        case HabitStates.habits_change.state:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await switch_keyboard(callback, state, HabitStates.main_menu, get_habit_choice_keyboard)
        case HabitStates.habits_change_menu.state:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await switch_keyboard(callback, state, HabitStates.main_menu, get_habit_choice_keyboard)
        case HabitStates.track_habit_menu.state:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await switch_keyboard(callback, state, HabitStates.main_menu, get_habit_choice_keyboard)
        case HabitStates.begin_track_habit.state:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            await switch_keyboard(callback, state, HabitStates.track_habit_menu, track_habit_keyboard)


"""
–ë–ª–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π.
"""
default_habits = {
    "sleep": {"name": "–°–æ–Ω", "description": "–ó–¥–æ—Ä–æ–≤—ã–π —Å–æ–Ω", "target_days": 30},
    "hydration": {"name": "–ì–∏–¥—Ä–∞—Ç–∞—Ü–∏—è", "description": "–ü–∏—Ç—å –±–æ–ª—å—à–µ –≤–æ–¥—ã", "target_days": 21},
    "meditation": {"name": "–ú–µ–¥–∏—Ç–∞—Ü–∏—è", "description": "–ú–µ–¥–∏—Ç–∞—Ü–∏—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å", "target_days": 21},
    "strength_training": {"name": "–°–∏–ª–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", "description": "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–ª—è —Å–∏–ª—ã", "target_days": 30},
    "running": {"name": "–ë–µ–≥", "description": "–ë–µ–≥ –ø–æ —É—Ç—Ä–∞–º", "target_days": 21},
    "swimming": {"name": "–ü–ª–∞–≤–∞–Ω–∏–µ", "description": "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –ø–ª–∞–≤–∞–Ω–∏–µ", "target_days": 30},
    "fruits_veggies": {"name": "–§—Ä—É–∫—Ç—ã –∏ –æ–≤–æ—â–∏", "description": "–£–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —Ñ—Ä—É–∫—Ç–æ–≤ –∏ –æ–≤–æ—â–µ–π", "target_days": 21},
    "breakfast": {"name": "–ó–∞–≤—Ç—Ä–∞–∫", "description": "–ó–¥–æ—Ä–æ–≤—ã–π –∑–∞–≤—Ç—Ä–∞–∫ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å", "target_days": 21},
    "less_sugar": {"name": "–ú–µ–Ω—å—à–µ —Å–∞—Ö–∞—Ä–∞", "description": "–°–Ω–∏–∑–∏—Ç—å –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —Å–∞—Ö–∞—Ä–∞", "target_days": 21},
    "smoking": {"name": "–û—Ç–∫–∞–∑ –æ—Ç –∫—É—Ä–µ–Ω–∏—è", "description": "–ë—Ä–æ—Å–∏—Ç—å –∫—É—Ä–∏—Ç—å", "target_days": 30},
    "alcohol": {"name": "–û—Ç–∫–∞–∑ –æ—Ç –∞–ª–∫–æ–≥–æ–ª—è", "description": "–ù–µ —É–ø–æ—Ç—Ä–µ–±–ª—è—Ç—å –∞–ª–∫–æ–≥–æ–ª—å", "target_days": 30},
}


@router.callback_query(F.data.in_(default_habits.keys()),
                       StateFilter(HabitStates.health_menu, HabitStates.useful_habit_menu,
                                   HabitStates.sport_menu, HabitStates.nutrition_menu, HabitStates.harmful_habit_menu))
async def handle_useful_habit(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    habit_key = callback.data  # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á –ø—Ä–∏–≤—ã—á–∫–∏, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –Ω–∞–∂–∞—Ç–∏—é

    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏
    habit_data = default_habits.get(habit_key, None)

    if habit_data:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏
        new_habit = {
            "name": habit_data["name"],
            "description": habit_data["description"],
            "target_days": habit_data["target_days"],
            "streak_days": 0,
            "start_date": "2024-09-17",  # –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
            "last_streak_start": "2024-09-17",
            "current_streak": 0,
            "total_completed": 0
        }
        # –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∏–≤—ã—á–∫—É —á–µ—Ä–µ–∑ –º–µ—Ç–æ–¥ User.create_habit
        result = await User.create_habit(new_habit)

        if result:
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–≤—ã—á–∫–∏
            success_msg = await bot.send_message(
                chat_id=callback.message.chat.id,
                text=f"–ü—Ä–∏–≤—ã—á–∫–∞ '{new_habit['name']}' —Å–æ–∑–¥–∞–Ω–∞ –∏ –±—É–¥–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å—Å—è {new_habit['target_days']} –¥–Ω–µ–π.",
                reply_markup=get_main_menu_keyboard()  # –í–µ—Ä–Ω—É—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
            )
            if user_id in user_messages:
                del user_messages[user_id]
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
            if user_id in user_messages:
                user_messages[user_id].append(success_msg.message_id)
                user_messages[user_id].append(callback.message_id)
            else:
                user_messages[user_id] = [success_msg.message_id]
        else:
            # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ–∞–∫—Ç—É–∞–ª–µ–Ω, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ
            await User.authenticate_user(callback.from_user.username, callback.message.chat.id)
            # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∏–≤—ã—á–∫—É –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞
            result = await User.create_habit(new_habit)
            if result:
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–≤—ã—á–∫–∏
                success_msg = await bot.send_message(
                    chat_id=callback.message.chat.id,
                    text=f"–ü—Ä–∏–≤—ã—á–∫–∞ '{new_habit['name']}' —Å–æ–∑–¥–∞–Ω–∞ –∏ –±—É–¥–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å—Å—è {new_habit['target_days']} –¥–Ω–µ–π.",
                    reply_markup=get_main_menu_keyboard()  # –í–µ—Ä–Ω—É—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
                )
                if user_id in user_messages:
                    del user_messages[user_id]
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
                if user_id in user_messages:
                    user_messages[user_id].append(success_msg.message_id)
                    user_messages[user_id].append(callback.message_id)
                else:
                    user_messages[user_id] = [success_msg.message_id]
            else:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –æ—Ç API
                detail = result.get('detail', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞') if isinstance(result,
                                                                                  dict) else "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞."
                await bot.send_message(
                    chat_id=callback.message.chat.id,
                    text=f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∏–≤—ã—á–∫—É: {detail}."
                )

